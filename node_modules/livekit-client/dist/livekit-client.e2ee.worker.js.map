{"version":3,"file":"livekit-client.e2ee.worker.js","sources":["../node_modules/.pnpm/loglevel@1.9.1/node_modules/loglevel/lib/loglevel.js","../src/logger.ts","../src/e2ee/constants.ts","../src/room/errors.ts","../src/e2ee/errors.ts","../src/e2ee/events.ts","../node_modules/.pnpm/events@3.3.0/node_modules/events/events.js","../src/e2ee/utils.ts","../src/e2ee/worker/SifGuard.ts","../src/e2ee/worker/FrameCryptor.ts","../src/e2ee/worker/ParticipantKeyHandler.ts","../src/e2ee/worker/e2ee.worker.ts"],"sourcesContent":["/*\n* loglevel - https://github.com/pimterry/loglevel\n*\n* Copyright (c) 2013 Tim Perry\n* Licensed under the MIT license.\n*/\n(function (root, definition) {\n    \"use strict\";\n    if (typeof define === 'function' && define.amd) {\n        define(definition);\n    } else if (typeof module === 'object' && module.exports) {\n        module.exports = definition();\n    } else {\n        root.log = definition();\n    }\n}(this, function () {\n    \"use strict\";\n\n    // Slightly dubious tricks to cut down minimized file size\n    var noop = function() {};\n    var undefinedType = \"undefined\";\n    var isIE = (typeof window !== undefinedType) && (typeof window.navigator !== undefinedType) && (\n        /Trident\\/|MSIE /.test(window.navigator.userAgent)\n    );\n\n    var logMethods = [\n        \"trace\",\n        \"debug\",\n        \"info\",\n        \"warn\",\n        \"error\"\n    ];\n\n    var _loggersByName = {};\n    var defaultLogger = null;\n\n    // Cross-browser bind equivalent that works at least back to IE6\n    function bindMethod(obj, methodName) {\n        var method = obj[methodName];\n        if (typeof method.bind === 'function') {\n            return method.bind(obj);\n        } else {\n            try {\n                return Function.prototype.bind.call(method, obj);\n            } catch (e) {\n                // Missing bind shim or IE8 + Modernizr, fallback to wrapping\n                return function() {\n                    return Function.prototype.apply.apply(method, [obj, arguments]);\n                };\n            }\n        }\n    }\n\n    // Trace() doesn't print the message in IE, so for that case we need to wrap it\n    function traceForIE() {\n        if (console.log) {\n            if (console.log.apply) {\n                console.log.apply(console, arguments);\n            } else {\n                // In old IE, native console methods themselves don't have apply().\n                Function.prototype.apply.apply(console.log, [console, arguments]);\n            }\n        }\n        if (console.trace) console.trace();\n    }\n\n    // Build the best logging method possible for this env\n    // Wherever possible we want to bind, not wrap, to preserve stack traces\n    function realMethod(methodName) {\n        if (methodName === 'debug') {\n            methodName = 'log';\n        }\n\n        if (typeof console === undefinedType) {\n            return false; // No method possible, for now - fixed later by enableLoggingWhenConsoleArrives\n        } else if (methodName === 'trace' && isIE) {\n            return traceForIE;\n        } else if (console[methodName] !== undefined) {\n            return bindMethod(console, methodName);\n        } else if (console.log !== undefined) {\n            return bindMethod(console, 'log');\n        } else {\n            return noop;\n        }\n    }\n\n    // These private functions always need `this` to be set properly\n\n    function replaceLoggingMethods() {\n        /*jshint validthis:true */\n        var level = this.getLevel();\n\n        // Replace the actual methods.\n        for (var i = 0; i < logMethods.length; i++) {\n            var methodName = logMethods[i];\n            this[methodName] = (i < level) ?\n                noop :\n                this.methodFactory(methodName, level, this.name);\n        }\n\n        // Define log.log as an alias for log.debug\n        this.log = this.debug;\n\n        // Return any important warnings.\n        if (typeof console === undefinedType && level < this.levels.SILENT) {\n            return \"No console available for logging\";\n        }\n    }\n\n    // In old IE versions, the console isn't present until you first open it.\n    // We build realMethod() replacements here that regenerate logging methods\n    function enableLoggingWhenConsoleArrives(methodName) {\n        return function () {\n            if (typeof console !== undefinedType) {\n                replaceLoggingMethods.call(this);\n                this[methodName].apply(this, arguments);\n            }\n        };\n    }\n\n    // By default, we use closely bound real methods wherever possible, and\n    // otherwise we wait for a console to appear, and then try again.\n    function defaultMethodFactory(methodName, _level, _loggerName) {\n        /*jshint validthis:true */\n        return realMethod(methodName) ||\n               enableLoggingWhenConsoleArrives.apply(this, arguments);\n    }\n\n    function Logger(name, factory) {\n      // Private instance variables.\n      var self = this;\n      /**\n       * The level inherited from a parent logger (or a global default). We\n       * cache this here rather than delegating to the parent so that it stays\n       * in sync with the actual logging methods that we have installed (the\n       * parent could change levels but we might not have rebuilt the loggers\n       * in this child yet).\n       * @type {number}\n       */\n      var inheritedLevel;\n      /**\n       * The default level for this logger, if any. If set, this overrides\n       * `inheritedLevel`.\n       * @type {number|null}\n       */\n      var defaultLevel;\n      /**\n       * A user-specific level for this logger. If set, this overrides\n       * `defaultLevel`.\n       * @type {number|null}\n       */\n      var userLevel;\n\n      var storageKey = \"loglevel\";\n      if (typeof name === \"string\") {\n        storageKey += \":\" + name;\n      } else if (typeof name === \"symbol\") {\n        storageKey = undefined;\n      }\n\n      function persistLevelIfPossible(levelNum) {\n          var levelName = (logMethods[levelNum] || 'silent').toUpperCase();\n\n          if (typeof window === undefinedType || !storageKey) return;\n\n          // Use localStorage if available\n          try {\n              window.localStorage[storageKey] = levelName;\n              return;\n          } catch (ignore) {}\n\n          // Use session cookie as fallback\n          try {\n              window.document.cookie =\n                encodeURIComponent(storageKey) + \"=\" + levelName + \";\";\n          } catch (ignore) {}\n      }\n\n      function getPersistedLevel() {\n          var storedLevel;\n\n          if (typeof window === undefinedType || !storageKey) return;\n\n          try {\n              storedLevel = window.localStorage[storageKey];\n          } catch (ignore) {}\n\n          // Fallback to cookies if local storage gives us nothing\n          if (typeof storedLevel === undefinedType) {\n              try {\n                  var cookie = window.document.cookie;\n                  var cookieName = encodeURIComponent(storageKey);\n                  var location = cookie.indexOf(cookieName + \"=\");\n                  if (location !== -1) {\n                      storedLevel = /^([^;]+)/.exec(\n                          cookie.slice(location + cookieName.length + 1)\n                      )[1];\n                  }\n              } catch (ignore) {}\n          }\n\n          // If the stored level is not valid, treat it as if nothing was stored.\n          if (self.levels[storedLevel] === undefined) {\n              storedLevel = undefined;\n          }\n\n          return storedLevel;\n      }\n\n      function clearPersistedLevel() {\n          if (typeof window === undefinedType || !storageKey) return;\n\n          // Use localStorage if available\n          try {\n              window.localStorage.removeItem(storageKey);\n          } catch (ignore) {}\n\n          // Use session cookie as fallback\n          try {\n              window.document.cookie =\n                encodeURIComponent(storageKey) + \"=; expires=Thu, 01 Jan 1970 00:00:00 UTC\";\n          } catch (ignore) {}\n      }\n\n      function normalizeLevel(input) {\n          var level = input;\n          if (typeof level === \"string\" && self.levels[level.toUpperCase()] !== undefined) {\n              level = self.levels[level.toUpperCase()];\n          }\n          if (typeof level === \"number\" && level >= 0 && level <= self.levels.SILENT) {\n              return level;\n          } else {\n              throw new TypeError(\"log.setLevel() called with invalid level: \" + input);\n          }\n      }\n\n      /*\n       *\n       * Public logger API - see https://github.com/pimterry/loglevel for details\n       *\n       */\n\n      self.name = name;\n\n      self.levels = { \"TRACE\": 0, \"DEBUG\": 1, \"INFO\": 2, \"WARN\": 3,\n          \"ERROR\": 4, \"SILENT\": 5};\n\n      self.methodFactory = factory || defaultMethodFactory;\n\n      self.getLevel = function () {\n          if (userLevel != null) {\n            return userLevel;\n          } else if (defaultLevel != null) {\n            return defaultLevel;\n          } else {\n            return inheritedLevel;\n          }\n      };\n\n      self.setLevel = function (level, persist) {\n          userLevel = normalizeLevel(level);\n          if (persist !== false) {  // defaults to true\n              persistLevelIfPossible(userLevel);\n          }\n\n          // NOTE: in v2, this should call rebuild(), which updates children.\n          return replaceLoggingMethods.call(self);\n      };\n\n      self.setDefaultLevel = function (level) {\n          defaultLevel = normalizeLevel(level);\n          if (!getPersistedLevel()) {\n              self.setLevel(level, false);\n          }\n      };\n\n      self.resetLevel = function () {\n          userLevel = null;\n          clearPersistedLevel();\n          replaceLoggingMethods.call(self);\n      };\n\n      self.enableAll = function(persist) {\n          self.setLevel(self.levels.TRACE, persist);\n      };\n\n      self.disableAll = function(persist) {\n          self.setLevel(self.levels.SILENT, persist);\n      };\n\n      self.rebuild = function () {\n          if (defaultLogger !== self) {\n              inheritedLevel = normalizeLevel(defaultLogger.getLevel());\n          }\n          replaceLoggingMethods.call(self);\n\n          if (defaultLogger === self) {\n              for (var childName in _loggersByName) {\n                _loggersByName[childName].rebuild();\n              }\n          }\n      };\n\n      // Initialize all the internal levels.\n      inheritedLevel = normalizeLevel(\n          defaultLogger ? defaultLogger.getLevel() : \"WARN\"\n      );\n      var initialLevel = getPersistedLevel();\n      if (initialLevel != null) {\n          userLevel = normalizeLevel(initialLevel);\n      }\n      replaceLoggingMethods.call(self);\n    }\n\n    /*\n     *\n     * Top-level API\n     *\n     */\n\n    defaultLogger = new Logger();\n\n    defaultLogger.getLogger = function getLogger(name) {\n        if ((typeof name !== \"symbol\" && typeof name !== \"string\") || name === \"\") {\n            throw new TypeError(\"You must supply a name when creating a logger.\");\n        }\n\n        var logger = _loggersByName[name];\n        if (!logger) {\n            logger = _loggersByName[name] = new Logger(\n                name,\n                defaultLogger.methodFactory\n            );\n        }\n        return logger;\n    };\n\n    // Grab the current global log variable in case of overwrite\n    var _log = (typeof window !== undefinedType) ? window.log : undefined;\n    defaultLogger.noConflict = function() {\n        if (typeof window !== undefinedType &&\n               window.log === defaultLogger) {\n            window.log = _log;\n        }\n\n        return defaultLogger;\n    };\n\n    defaultLogger.getLoggers = function getLoggers() {\n        return _loggersByName;\n    };\n\n    // ES6 default export, for compatibility\n    defaultLogger['default'] = defaultLogger;\n\n    return defaultLogger;\n}));\n","import * as log from 'loglevel';\n\nexport enum LogLevel {\n  trace = 0,\n  debug = 1,\n  info = 2,\n  warn = 3,\n  error = 4,\n  silent = 5,\n}\n\nexport enum LoggerNames {\n  Default = 'livekit',\n  Room = 'livekit-room',\n  Participant = 'livekit-participant',\n  Track = 'livekit-track',\n  Publication = 'livekit-track-publication',\n  Engine = 'livekit-engine',\n  Signal = 'livekit-signal',\n  PCManager = 'livekit-pc-manager',\n  PCTransport = 'livekit-pc-transport',\n  E2EE = 'lk-e2ee',\n}\n\ntype LogLevelString = keyof typeof LogLevel;\n\nexport type StructuredLogger = log.Logger & {\n  trace: (msg: string, context?: object) => void;\n  debug: (msg: string, context?: object) => void;\n  info: (msg: string, context?: object) => void;\n  warn: (msg: string, context?: object) => void;\n  error: (msg: string, context?: object) => void;\n  setDefaultLevel: (level: log.LogLevelDesc) => void;\n  setLevel: (level: log.LogLevelDesc) => void;\n  getLevel: () => number;\n};\n\nlet livekitLogger = log.getLogger('livekit');\nconst livekitLoggers = Object.values(LoggerNames).map((name) => log.getLogger(name));\n\nlivekitLogger.setDefaultLevel(LogLevel.info);\n\nexport default livekitLogger as StructuredLogger;\n\n/**\n * @internal\n */\nexport function getLogger(name: string) {\n  const logger = log.getLogger(name);\n  logger.setDefaultLevel(livekitLogger.getLevel());\n  return logger as StructuredLogger;\n}\n\nexport function setLogLevel(level: LogLevel | LogLevelString, loggerName?: LoggerNames) {\n  if (loggerName) {\n    log.getLogger(loggerName).setLevel(level);\n  } else {\n    for (const logger of livekitLoggers) {\n      logger.setLevel(level);\n    }\n  }\n}\n\nexport type LogExtension = (level: LogLevel, msg: string, context?: object) => void;\n\n/**\n * use this to hook into the logging function to allow sending internal livekit logs to third party services\n * if set, the browser logs will lose their stacktrace information (see https://github.com/pimterry/loglevel#writing-plugins)\n */\nexport function setLogExtension(extension: LogExtension, logger?: StructuredLogger) {\n  const loggers = logger ? [logger] : livekitLoggers;\n\n  loggers.forEach((logR) => {\n    const originalFactory = logR.methodFactory;\n\n    logR.methodFactory = (methodName, configLevel, loggerName) => {\n      const rawMethod = originalFactory(methodName, configLevel, loggerName);\n\n      const logLevel = LogLevel[methodName as LogLevelString];\n      const needLog = logLevel >= configLevel && logLevel < LogLevel.silent;\n\n      return (msg, context?: [msg: string, context: object]) => {\n        if (context) rawMethod(msg, context);\n        else rawMethod(msg);\n        if (needLog) {\n          extension(logLevel, msg, context);\n        }\n      };\n    };\n    logR.setLevel(logR.getLevel());\n  });\n}\n\nexport const workerLogger = log.getLogger('lk-e2ee') as StructuredLogger;\n","import type { KeyProviderOptions } from './types';\n\nexport const ENCRYPTION_ALGORITHM = 'AES-GCM';\n\n// How many consecutive frames can fail decrypting before a particular key gets marked as invalid\nexport const DECRYPTION_FAILURE_TOLERANCE = 10;\n\n// We copy the first bytes of the VP8 payload unencrypted.\n// For keyframes this is 10 bytes, for non-keyframes (delta) 3. See\n//   https://tools.ietf.org/html/rfc6386#section-9.1\n// This allows the bridge to continue detecting keyframes (only one byte needed in the JVB)\n// and is also a bit easier for the VP8 decoder (i.e. it generates funny garbage pictures\n// instead of being unable to decode).\n// This is a bit for show and we might want to reduce to 1 unconditionally in the final version.\n//\n// For audio (where frame.type is not set) we do not encrypt the opus TOC byte:\n//   https://tools.ietf.org/html/rfc6716#section-3.1\nexport const UNENCRYPTED_BYTES = {\n  key: 10,\n  delta: 3,\n  audio: 1, // frame.type is not set on audio, so this is set manually\n  empty: 0,\n} as const;\n\n/* We use a 12 byte bit IV. This is signalled in plain together with the\n packet. See https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/encrypt#parameters */\nexport const IV_LENGTH = 12;\n\n// flag set to indicate that e2ee has been setup for sender/receiver;\nexport const E2EE_FLAG = 'lk_e2ee';\n\nexport const SALT = 'LKFrameEncryptionKey';\n\nexport const KEY_PROVIDER_DEFAULTS: KeyProviderOptions = {\n  sharedKey: false,\n  ratchetSalt: SALT,\n  ratchetWindowSize: 8,\n  failureTolerance: DECRYPTION_FAILURE_TOLERANCE,\n  keyringSize: 16,\n} as const;\n\nexport const MAX_SIF_COUNT = 100;\nexport const MAX_SIF_DURATION = 2000;\n","import { RequestResponse_Reason } from '@livekit/protocol';\n\nexport class LivekitError extends Error {\n  code: number;\n\n  constructor(code: number, message?: string) {\n    super(message || 'an error has occured');\n    this.code = code;\n  }\n}\n\nexport const enum ConnectionErrorReason {\n  NotAllowed,\n  ServerUnreachable,\n  InternalError,\n  Cancelled,\n  LeaveRequest,\n}\n\nexport class ConnectionError extends LivekitError {\n  status?: number;\n\n  reason?: ConnectionErrorReason;\n\n  constructor(message?: string, reason?: ConnectionErrorReason, status?: number) {\n    super(1, message);\n    this.status = status;\n    this.reason = reason;\n  }\n}\n\nexport class DeviceUnsupportedError extends LivekitError {\n  constructor(message?: string) {\n    super(21, message ?? 'device is unsupported');\n  }\n}\n\nexport class TrackInvalidError extends LivekitError {\n  constructor(message?: string) {\n    super(20, message ?? 'track is invalid');\n  }\n}\n\nexport class UnsupportedServer extends LivekitError {\n  constructor(message?: string) {\n    super(10, message ?? 'unsupported server');\n  }\n}\n\nexport class UnexpectedConnectionState extends LivekitError {\n  constructor(message?: string) {\n    super(12, message ?? 'unexpected connection state');\n  }\n}\n\nexport class NegotiationError extends LivekitError {\n  constructor(message?: string) {\n    super(13, message ?? 'unable to negotiate');\n  }\n}\n\nexport class PublishDataError extends LivekitError {\n  constructor(message?: string) {\n    super(13, message ?? 'unable to publish data');\n  }\n}\n\nexport type RequestErrorReason =\n  | Exclude<RequestResponse_Reason, RequestResponse_Reason.OK>\n  | 'TimeoutError';\n\nexport class SignalRequestError extends LivekitError {\n  reason: RequestErrorReason;\n\n  constructor(message: string, reason: RequestErrorReason) {\n    super(15, message);\n    this.reason = reason;\n  }\n}\n\nexport enum MediaDeviceFailure {\n  // user rejected permissions\n  PermissionDenied = 'PermissionDenied',\n  // device is not available\n  NotFound = 'NotFound',\n  // device is in use. On Windows, only a single tab may get access to a device at a time.\n  DeviceInUse = 'DeviceInUse',\n  Other = 'Other',\n}\n\nexport namespace MediaDeviceFailure {\n  export function getFailure(error: any): MediaDeviceFailure | undefined {\n    if (error && 'name' in error) {\n      if (error.name === 'NotFoundError' || error.name === 'DevicesNotFoundError') {\n        return MediaDeviceFailure.NotFound;\n      }\n      if (error.name === 'NotAllowedError' || error.name === 'PermissionDeniedError') {\n        return MediaDeviceFailure.PermissionDenied;\n      }\n      if (error.name === 'NotReadableError' || error.name === 'TrackStartError') {\n        return MediaDeviceFailure.DeviceInUse;\n      }\n      return MediaDeviceFailure.Other;\n    }\n  }\n}\n","import { LivekitError } from '../room/errors';\n\nexport enum CryptorErrorReason {\n  InvalidKey = 0,\n  MissingKey = 1,\n  InternalError = 2,\n}\n\nexport class CryptorError extends LivekitError {\n  reason: CryptorErrorReason;\n\n  participantIdentity?: string;\n\n  constructor(\n    message?: string,\n    reason: CryptorErrorReason = CryptorErrorReason.InternalError,\n    participantIdentity?: string,\n  ) {\n    super(40, message);\n    this.reason = reason;\n    this.participantIdentity = participantIdentity;\n  }\n}\n","import type Participant from '../room/participant/Participant';\nimport type { CryptorError } from './errors';\nimport type { KeyInfo } from './types';\n\nexport enum KeyProviderEvent {\n  SetKey = 'setKey',\n  RatchetRequest = 'ratchetRequest',\n  KeyRatcheted = 'keyRatcheted',\n}\n\nexport type KeyProviderCallbacks = {\n  [KeyProviderEvent.SetKey]: (keyInfo: KeyInfo) => void;\n  [KeyProviderEvent.RatchetRequest]: (participantIdentity?: string, keyIndex?: number) => void;\n  [KeyProviderEvent.KeyRatcheted]: (material: CryptoKey, keyIndex?: number) => void;\n};\n\nexport enum KeyHandlerEvent {\n  KeyRatcheted = 'keyRatcheted',\n}\n\nexport type ParticipantKeyHandlerCallbacks = {\n  [KeyHandlerEvent.KeyRatcheted]: (\n    material: CryptoKey,\n    participantIdentity: string,\n    keyIndex?: number,\n  ) => void;\n};\n\nexport enum EncryptionEvent {\n  ParticipantEncryptionStatusChanged = 'participantEncryptionStatusChanged',\n  EncryptionError = 'encryptionError',\n}\n\nexport type E2EEManagerCallbacks = {\n  [EncryptionEvent.ParticipantEncryptionStatusChanged]: (\n    enabled: boolean,\n    participant: Participant,\n  ) => void;\n  [EncryptionEvent.EncryptionError]: (error: Error) => void;\n};\n\nexport type CryptorCallbacks = {\n  [CryptorEvent.Error]: (error: CryptorError) => void;\n};\n\nexport enum CryptorEvent {\n  Error = 'cryptorError',\n}\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\nvar R = typeof Reflect === 'object' ? Reflect : null\nvar ReflectApply = R && typeof R.apply === 'function'\n  ? R.apply\n  : function ReflectApply(target, receiver, args) {\n    return Function.prototype.apply.call(target, receiver, args);\n  }\n\nvar ReflectOwnKeys\nif (R && typeof R.ownKeys === 'function') {\n  ReflectOwnKeys = R.ownKeys\n} else if (Object.getOwnPropertySymbols) {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target)\n      .concat(Object.getOwnPropertySymbols(target));\n  };\n} else {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target);\n  };\n}\n\nfunction ProcessEmitWarning(warning) {\n  if (console && console.warn) console.warn(warning);\n}\n\nvar NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {\n  return value !== value;\n}\n\nfunction EventEmitter() {\n  EventEmitter.init.call(this);\n}\nmodule.exports = EventEmitter;\nmodule.exports.once = once;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._eventsCount = 0;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nvar defaultMaxListeners = 10;\n\nfunction checkListener(listener) {\n  if (typeof listener !== 'function') {\n    throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n  }\n}\n\nObject.defineProperty(EventEmitter, 'defaultMaxListeners', {\n  enumerable: true,\n  get: function() {\n    return defaultMaxListeners;\n  },\n  set: function(arg) {\n    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {\n      throw new RangeError('The value of \"defaultMaxListeners\" is out of range. It must be a non-negative number. Received ' + arg + '.');\n    }\n    defaultMaxListeners = arg;\n  }\n});\n\nEventEmitter.init = function() {\n\n  if (this._events === undefined ||\n      this._events === Object.getPrototypeOf(this)._events) {\n    this._events = Object.create(null);\n    this._eventsCount = 0;\n  }\n\n  this._maxListeners = this._maxListeners || undefined;\n};\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\n  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {\n    throw new RangeError('The value of \"n\" is out of range. It must be a non-negative number. Received ' + n + '.');\n  }\n  this._maxListeners = n;\n  return this;\n};\n\nfunction _getMaxListeners(that) {\n  if (that._maxListeners === undefined)\n    return EventEmitter.defaultMaxListeners;\n  return that._maxListeners;\n}\n\nEventEmitter.prototype.getMaxListeners = function getMaxListeners() {\n  return _getMaxListeners(this);\n};\n\nEventEmitter.prototype.emit = function emit(type) {\n  var args = [];\n  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);\n  var doError = (type === 'error');\n\n  var events = this._events;\n  if (events !== undefined)\n    doError = (doError && events.error === undefined);\n  else if (!doError)\n    return false;\n\n  // If there is no 'error' event listener then throw.\n  if (doError) {\n    var er;\n    if (args.length > 0)\n      er = args[0];\n    if (er instanceof Error) {\n      // Note: The comments on the `throw` lines are intentional, they show\n      // up in Node's output if this results in an unhandled exception.\n      throw er; // Unhandled 'error' event\n    }\n    // At least give some kind of context to the user\n    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));\n    err.context = er;\n    throw err; // Unhandled 'error' event\n  }\n\n  var handler = events[type];\n\n  if (handler === undefined)\n    return false;\n\n  if (typeof handler === 'function') {\n    ReflectApply(handler, this, args);\n  } else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      ReflectApply(listeners[i], this, args);\n  }\n\n  return true;\n};\n\nfunction _addListener(target, type, listener, prepend) {\n  var m;\n  var events;\n  var existing;\n\n  checkListener(listener);\n\n  events = target._events;\n  if (events === undefined) {\n    events = target._events = Object.create(null);\n    target._eventsCount = 0;\n  } else {\n    // To avoid recursion in the case that type === \"newListener\"! Before\n    // adding it to the listeners, first emit \"newListener\".\n    if (events.newListener !== undefined) {\n      target.emit('newListener', type,\n                  listener.listener ? listener.listener : listener);\n\n      // Re-assign `events` because a newListener handler could have caused the\n      // this._events to be assigned to a new object\n      events = target._events;\n    }\n    existing = events[type];\n  }\n\n  if (existing === undefined) {\n    // Optimize the case of one listener. Don't need the extra array object.\n    existing = events[type] = listener;\n    ++target._eventsCount;\n  } else {\n    if (typeof existing === 'function') {\n      // Adding the second element, need to change to array.\n      existing = events[type] =\n        prepend ? [listener, existing] : [existing, listener];\n      // If we've already got an array, just append.\n    } else if (prepend) {\n      existing.unshift(listener);\n    } else {\n      existing.push(listener);\n    }\n\n    // Check for listener leak\n    m = _getMaxListeners(target);\n    if (m > 0 && existing.length > m && !existing.warned) {\n      existing.warned = true;\n      // No error code for this since it is a Warning\n      // eslint-disable-next-line no-restricted-syntax\n      var w = new Error('Possible EventEmitter memory leak detected. ' +\n                          existing.length + ' ' + String(type) + ' listeners ' +\n                          'added. Use emitter.setMaxListeners() to ' +\n                          'increase limit');\n      w.name = 'MaxListenersExceededWarning';\n      w.emitter = target;\n      w.type = type;\n      w.count = existing.length;\n      ProcessEmitWarning(w);\n    }\n  }\n\n  return target;\n}\n\nEventEmitter.prototype.addListener = function addListener(type, listener) {\n  return _addListener(this, type, listener, false);\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.prependListener =\n    function prependListener(type, listener) {\n      return _addListener(this, type, listener, true);\n    };\n\nfunction onceWrapper() {\n  if (!this.fired) {\n    this.target.removeListener(this.type, this.wrapFn);\n    this.fired = true;\n    if (arguments.length === 0)\n      return this.listener.call(this.target);\n    return this.listener.apply(this.target, arguments);\n  }\n}\n\nfunction _onceWrap(target, type, listener) {\n  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };\n  var wrapped = onceWrapper.bind(state);\n  wrapped.listener = listener;\n  state.wrapFn = wrapped;\n  return wrapped;\n}\n\nEventEmitter.prototype.once = function once(type, listener) {\n  checkListener(listener);\n  this.on(type, _onceWrap(this, type, listener));\n  return this;\n};\n\nEventEmitter.prototype.prependOnceListener =\n    function prependOnceListener(type, listener) {\n      checkListener(listener);\n      this.prependListener(type, _onceWrap(this, type, listener));\n      return this;\n    };\n\n// Emits a 'removeListener' event if and only if the listener was removed.\nEventEmitter.prototype.removeListener =\n    function removeListener(type, listener) {\n      var list, events, position, i, originalListener;\n\n      checkListener(listener);\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      list = events[type];\n      if (list === undefined)\n        return this;\n\n      if (list === listener || list.listener === listener) {\n        if (--this._eventsCount === 0)\n          this._events = Object.create(null);\n        else {\n          delete events[type];\n          if (events.removeListener)\n            this.emit('removeListener', type, list.listener || listener);\n        }\n      } else if (typeof list !== 'function') {\n        position = -1;\n\n        for (i = list.length - 1; i >= 0; i--) {\n          if (list[i] === listener || list[i].listener === listener) {\n            originalListener = list[i].listener;\n            position = i;\n            break;\n          }\n        }\n\n        if (position < 0)\n          return this;\n\n        if (position === 0)\n          list.shift();\n        else {\n          spliceOne(list, position);\n        }\n\n        if (list.length === 1)\n          events[type] = list[0];\n\n        if (events.removeListener !== undefined)\n          this.emit('removeListener', type, originalListener || listener);\n      }\n\n      return this;\n    };\n\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\n\nEventEmitter.prototype.removeAllListeners =\n    function removeAllListeners(type) {\n      var listeners, events, i;\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      // not listening for removeListener, no need to emit\n      if (events.removeListener === undefined) {\n        if (arguments.length === 0) {\n          this._events = Object.create(null);\n          this._eventsCount = 0;\n        } else if (events[type] !== undefined) {\n          if (--this._eventsCount === 0)\n            this._events = Object.create(null);\n          else\n            delete events[type];\n        }\n        return this;\n      }\n\n      // emit removeListener for all listeners on all events\n      if (arguments.length === 0) {\n        var keys = Object.keys(events);\n        var key;\n        for (i = 0; i < keys.length; ++i) {\n          key = keys[i];\n          if (key === 'removeListener') continue;\n          this.removeAllListeners(key);\n        }\n        this.removeAllListeners('removeListener');\n        this._events = Object.create(null);\n        this._eventsCount = 0;\n        return this;\n      }\n\n      listeners = events[type];\n\n      if (typeof listeners === 'function') {\n        this.removeListener(type, listeners);\n      } else if (listeners !== undefined) {\n        // LIFO order\n        for (i = listeners.length - 1; i >= 0; i--) {\n          this.removeListener(type, listeners[i]);\n        }\n      }\n\n      return this;\n    };\n\nfunction _listeners(target, type, unwrap) {\n  var events = target._events;\n\n  if (events === undefined)\n    return [];\n\n  var evlistener = events[type];\n  if (evlistener === undefined)\n    return [];\n\n  if (typeof evlistener === 'function')\n    return unwrap ? [evlistener.listener || evlistener] : [evlistener];\n\n  return unwrap ?\n    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);\n}\n\nEventEmitter.prototype.listeners = function listeners(type) {\n  return _listeners(this, type, true);\n};\n\nEventEmitter.prototype.rawListeners = function rawListeners(type) {\n  return _listeners(this, type, false);\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  if (typeof emitter.listenerCount === 'function') {\n    return emitter.listenerCount(type);\n  } else {\n    return listenerCount.call(emitter, type);\n  }\n};\n\nEventEmitter.prototype.listenerCount = listenerCount;\nfunction listenerCount(type) {\n  var events = this._events;\n\n  if (events !== undefined) {\n    var evlistener = events[type];\n\n    if (typeof evlistener === 'function') {\n      return 1;\n    } else if (evlistener !== undefined) {\n      return evlistener.length;\n    }\n  }\n\n  return 0;\n}\n\nEventEmitter.prototype.eventNames = function eventNames() {\n  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];\n};\n\nfunction arrayClone(arr, n) {\n  var copy = new Array(n);\n  for (var i = 0; i < n; ++i)\n    copy[i] = arr[i];\n  return copy;\n}\n\nfunction spliceOne(list, index) {\n  for (; index + 1 < list.length; index++)\n    list[index] = list[index + 1];\n  list.pop();\n}\n\nfunction unwrapListeners(arr) {\n  var ret = new Array(arr.length);\n  for (var i = 0; i < ret.length; ++i) {\n    ret[i] = arr[i].listener || arr[i];\n  }\n  return ret;\n}\n\nfunction once(emitter, name) {\n  return new Promise(function (resolve, reject) {\n    function errorListener(err) {\n      emitter.removeListener(name, resolver);\n      reject(err);\n    }\n\n    function resolver() {\n      if (typeof emitter.removeListener === 'function') {\n        emitter.removeListener('error', errorListener);\n      }\n      resolve([].slice.call(arguments));\n    };\n\n    eventTargetAgnosticAddListener(emitter, name, resolver, { once: true });\n    if (name !== 'error') {\n      addErrorHandlerIfEventEmitter(emitter, errorListener, { once: true });\n    }\n  });\n}\n\nfunction addErrorHandlerIfEventEmitter(emitter, handler, flags) {\n  if (typeof emitter.on === 'function') {\n    eventTargetAgnosticAddListener(emitter, 'error', handler, flags);\n  }\n}\n\nfunction eventTargetAgnosticAddListener(emitter, name, listener, flags) {\n  if (typeof emitter.on === 'function') {\n    if (flags.once) {\n      emitter.once(name, listener);\n    } else {\n      emitter.on(name, listener);\n    }\n  } else if (typeof emitter.addEventListener === 'function') {\n    // EventTarget does not have `error` event semantics like Node\n    // EventEmitters, we do not listen for `error` events here.\n    emitter.addEventListener(name, function wrapListener(arg) {\n      // IE does not have builtin `{ once: true }` support so we\n      // have to do it manually.\n      if (flags.once) {\n        emitter.removeEventListener(name, wrapListener);\n      }\n      listener(arg);\n    });\n  } else {\n    throw new TypeError('The \"emitter\" argument must be of type EventEmitter. Received type ' + typeof emitter);\n  }\n}\n","import { ENCRYPTION_ALGORITHM } from './constants';\n\nexport function isE2EESupported() {\n  return isInsertableStreamSupported() || isScriptTransformSupported();\n}\n\nexport function isScriptTransformSupported() {\n  // @ts-ignore\n  return typeof window.RTCRtpScriptTransform !== 'undefined';\n}\n\nexport function isInsertableStreamSupported() {\n  return (\n    typeof window.RTCRtpSender !== 'undefined' &&\n    // @ts-ignore\n    typeof window.RTCRtpSender.prototype.createEncodedStreams !== 'undefined'\n  );\n}\n\nexport function isVideoFrame(\n  frame: RTCEncodedAudioFrame | RTCEncodedVideoFrame,\n): frame is RTCEncodedVideoFrame {\n  return 'type' in frame;\n}\n\nexport async function importKey(\n  keyBytes: Uint8Array | ArrayBuffer,\n  algorithm: string | { name: string } = { name: ENCRYPTION_ALGORITHM },\n  usage: 'derive' | 'encrypt' = 'encrypt',\n) {\n  // https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/importKey\n  return crypto.subtle.importKey(\n    'raw',\n    keyBytes,\n    algorithm,\n    false,\n    usage === 'derive' ? ['deriveBits', 'deriveKey'] : ['encrypt', 'decrypt'],\n  );\n}\n\nexport async function createKeyMaterialFromString(password: string) {\n  let enc = new TextEncoder();\n\n  const keyMaterial = await crypto.subtle.importKey(\n    'raw',\n    enc.encode(password),\n    {\n      name: 'PBKDF2',\n    },\n    false,\n    ['deriveBits', 'deriveKey'],\n  );\n\n  return keyMaterial;\n}\n\nexport async function createKeyMaterialFromBuffer(cryptoBuffer: ArrayBuffer) {\n  const keyMaterial = await crypto.subtle.importKey('raw', cryptoBuffer, 'HKDF', false, [\n    'deriveBits',\n    'deriveKey',\n  ]);\n\n  return keyMaterial;\n}\n\nfunction getAlgoOptions(algorithmName: string, salt: string) {\n  const textEncoder = new TextEncoder();\n  const encodedSalt = textEncoder.encode(salt);\n  switch (algorithmName) {\n    case 'HKDF':\n      return {\n        name: 'HKDF',\n        salt: encodedSalt,\n        hash: 'SHA-256',\n        info: new ArrayBuffer(128),\n      };\n    case 'PBKDF2': {\n      return {\n        name: 'PBKDF2',\n        salt: encodedSalt,\n        hash: 'SHA-256',\n        iterations: 100000,\n      };\n    }\n    default:\n      throw new Error(`algorithm ${algorithmName} is currently unsupported`);\n  }\n}\n\n/**\n * Derives a set of keys from the master key.\n * See https://tools.ietf.org/html/draft-omara-sframe-00#section-4.3.1\n */\nexport async function deriveKeys(material: CryptoKey, salt: string) {\n  const algorithmOptions = getAlgoOptions(material.algorithm.name, salt);\n\n  // https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/deriveKey#HKDF\n  // https://developer.mozilla.org/en-US/docs/Web/API/HkdfParams\n  const encryptionKey = await crypto.subtle.deriveKey(\n    algorithmOptions,\n    material,\n    {\n      name: ENCRYPTION_ALGORITHM,\n      length: 128,\n    },\n    false,\n    ['encrypt', 'decrypt'],\n  );\n\n  return { material, encryptionKey };\n}\n\nexport function createE2EEKey(): Uint8Array {\n  return window.crypto.getRandomValues(new Uint8Array(32));\n}\n\n/**\n * Ratchets a key. See\n * https://tools.ietf.org/html/draft-omara-sframe-00#section-4.3.5.1\n */\nexport async function ratchet(material: CryptoKey, salt: string): Promise<ArrayBuffer> {\n  const algorithmOptions = getAlgoOptions(material.algorithm.name, salt);\n\n  // https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/deriveBits\n  return crypto.subtle.deriveBits(algorithmOptions, material, 256);\n}\n\nexport function needsRbspUnescaping(frameData: Uint8Array) {\n  for (var i = 0; i < frameData.length - 3; i++) {\n    if (frameData[i] == 0 && frameData[i + 1] == 0 && frameData[i + 2] == 3) return true;\n  }\n  return false;\n}\n\nexport function parseRbsp(stream: Uint8Array): Uint8Array {\n  const dataOut: number[] = [];\n  var length = stream.length;\n  for (var i = 0; i < stream.length; ) {\n    // Be careful about over/underflow here. byte_length_ - 3 can underflow, and\n    // i + 3 can overflow, but byte_length_ - i can't, because i < byte_length_\n    // above, and that expression will produce the number of bytes left in\n    // the stream including the byte at i.\n    if (length - i >= 3 && !stream[i] && !stream[i + 1] && stream[i + 2] == 3) {\n      // Two rbsp bytes.\n      dataOut.push(stream[i++]);\n      dataOut.push(stream[i++]);\n      // Skip the emulation byte.\n      i++;\n    } else {\n      // Single rbsp byte.\n      dataOut.push(stream[i++]);\n    }\n  }\n  return new Uint8Array(dataOut);\n}\n\nconst kZerosInStartSequence = 2;\nconst kEmulationByte = 3;\n\nexport function writeRbsp(data_in: Uint8Array): Uint8Array {\n  const dataOut: number[] = [];\n  var numConsecutiveZeros = 0;\n  for (var i = 0; i < data_in.length; ++i) {\n    var byte = data_in[i];\n    if (byte <= kEmulationByte && numConsecutiveZeros >= kZerosInStartSequence) {\n      // Need to escape.\n      dataOut.push(kEmulationByte);\n      numConsecutiveZeros = 0;\n    }\n    dataOut.push(byte);\n    if (byte == 0) {\n      ++numConsecutiveZeros;\n    } else {\n      numConsecutiveZeros = 0;\n    }\n  }\n  return new Uint8Array(dataOut);\n}\n","import { MAX_SIF_COUNT, MAX_SIF_DURATION } from '../constants';\n\nexport class SifGuard {\n  private consecutiveSifCount = 0;\n\n  private sifSequenceStartedAt: number | undefined;\n\n  private lastSifReceivedAt: number = 0;\n\n  private userFramesSinceSif: number = 0;\n\n  recordSif() {\n    this.consecutiveSifCount += 1;\n    this.sifSequenceStartedAt ??= Date.now();\n    this.lastSifReceivedAt = Date.now();\n  }\n\n  recordUserFrame() {\n    if (this.sifSequenceStartedAt === undefined) {\n      return;\n    } else {\n      this.userFramesSinceSif += 1;\n    }\n    if (\n      // reset if we received more user frames than SIFs\n      this.userFramesSinceSif > this.consecutiveSifCount ||\n      // also reset if we got a new user frame and the latest SIF frame hasn't been updated in a while\n      Date.now() - this.lastSifReceivedAt > MAX_SIF_DURATION\n    ) {\n      this.reset();\n    }\n  }\n\n  isSifAllowed() {\n    return (\n      this.consecutiveSifCount < MAX_SIF_COUNT &&\n      (this.sifSequenceStartedAt === undefined ||\n        Date.now() - this.sifSequenceStartedAt < MAX_SIF_DURATION)\n    );\n  }\n\n  reset() {\n    this.userFramesSinceSif = 0;\n    this.consecutiveSifCount = 0;\n    this.sifSequenceStartedAt = undefined;\n  }\n}\n","/* eslint-disable @typescript-eslint/no-unused-vars */\n// TODO code inspired by https://github.com/webrtc/samples/blob/gh-pages/src/content/insertable-streams/endtoend-encryption/js/worker.js\nimport { EventEmitter } from 'events';\nimport type TypedEventEmitter from 'typed-emitter';\nimport { workerLogger } from '../../logger';\nimport type { VideoCodec } from '../../room/track/options';\nimport { ENCRYPTION_ALGORITHM, IV_LENGTH, UNENCRYPTED_BYTES } from '../constants';\nimport { CryptorError, CryptorErrorReason } from '../errors';\nimport { CryptorCallbacks, CryptorEvent } from '../events';\nimport type { DecodeRatchetOptions, KeyProviderOptions, KeySet } from '../types';\nimport { deriveKeys, isVideoFrame, needsRbspUnescaping, parseRbsp, writeRbsp } from '../utils';\nimport type { ParticipantKeyHandler } from './ParticipantKeyHandler';\nimport { SifGuard } from './SifGuard';\n\nexport const encryptionEnabledMap: Map<string, boolean> = new Map();\n\nexport interface FrameCryptorConstructor {\n  new (opts?: unknown): BaseFrameCryptor;\n}\n\nexport interface TransformerInfo {\n  readable: ReadableStream;\n  writable: WritableStream;\n  transformer: TransformStream;\n  abortController: AbortController;\n}\n\nexport class BaseFrameCryptor extends (EventEmitter as new () => TypedEventEmitter<CryptorCallbacks>) {\n  protected encodeFunction(\n    encodedFrame: RTCEncodedVideoFrame | RTCEncodedAudioFrame,\n    controller: TransformStreamDefaultController,\n  ): Promise<any> {\n    throw Error('not implemented for subclass');\n  }\n\n  protected decodeFunction(\n    encodedFrame: RTCEncodedVideoFrame | RTCEncodedAudioFrame,\n    controller: TransformStreamDefaultController,\n  ): Promise<any> {\n    throw Error('not implemented for subclass');\n  }\n}\n\n/**\n * Cryptor is responsible for en-/decrypting media frames.\n * Each Cryptor instance is responsible for en-/decrypting a single mediaStreamTrack.\n */\nexport class FrameCryptor extends BaseFrameCryptor {\n  private sendCounts: Map<number, number>;\n\n  private participantIdentity: string | undefined;\n\n  private trackId: string | undefined;\n\n  private keys: ParticipantKeyHandler;\n\n  private videoCodec?: VideoCodec;\n\n  private rtpMap: Map<number, VideoCodec>;\n\n  private keyProviderOptions: KeyProviderOptions;\n\n  /**\n   * used for detecting server injected unencrypted frames\n   */\n  private sifTrailer: Uint8Array;\n\n  private sifGuard: SifGuard;\n\n  private detectedCodec?: VideoCodec;\n\n  constructor(opts: {\n    keys: ParticipantKeyHandler;\n    participantIdentity: string;\n    keyProviderOptions: KeyProviderOptions;\n    sifTrailer?: Uint8Array;\n  }) {\n    super();\n    this.sendCounts = new Map();\n    this.keys = opts.keys;\n    this.participantIdentity = opts.participantIdentity;\n    this.rtpMap = new Map();\n    this.keyProviderOptions = opts.keyProviderOptions;\n    this.sifTrailer = opts.sifTrailer ?? Uint8Array.from([]);\n    this.sifGuard = new SifGuard();\n  }\n\n  private get logContext() {\n    return {\n      participant: this.participantIdentity,\n      mediaTrackId: this.trackId,\n      fallbackCodec: this.videoCodec,\n    };\n  }\n\n  /**\n   * Assign a different participant to the cryptor.\n   * useful for transceiver re-use\n   * @param id\n   * @param keys\n   */\n  setParticipant(id: string, keys: ParticipantKeyHandler) {\n    workerLogger.debug('setting new participant on cryptor', {\n      ...this.logContext,\n      participant: id,\n    });\n    if (this.participantIdentity) {\n      workerLogger.error(\n        'cryptor has already a participant set, participant should have been unset before',\n        {\n          ...this.logContext,\n        },\n      );\n    }\n    this.participantIdentity = id;\n    this.keys = keys;\n    this.sifGuard.reset();\n  }\n\n  unsetParticipant() {\n    workerLogger.debug('unsetting participant', this.logContext);\n    this.participantIdentity = undefined;\n  }\n\n  isEnabled() {\n    if (this.participantIdentity) {\n      return encryptionEnabledMap.get(this.participantIdentity);\n    } else {\n      return undefined;\n    }\n  }\n\n  getParticipantIdentity() {\n    return this.participantIdentity;\n  }\n\n  getTrackId() {\n    return this.trackId;\n  }\n\n  /**\n   * Update the video codec used by the mediaStreamTrack\n   * @param codec\n   */\n  setVideoCodec(codec: VideoCodec) {\n    this.videoCodec = codec;\n  }\n\n  /**\n   * rtp payload type map used for figuring out codec of payload type when encoding\n   * @param map\n   */\n  setRtpMap(map: Map<number, VideoCodec>) {\n    this.rtpMap = map;\n  }\n\n  setupTransform(\n    operation: 'encode' | 'decode',\n    readable: ReadableStream,\n    writable: WritableStream,\n    trackId: string,\n    codec?: VideoCodec,\n  ) {\n    if (codec) {\n      workerLogger.info('setting codec on cryptor to', { codec });\n      this.videoCodec = codec;\n    }\n\n    workerLogger.debug('Setting up frame cryptor transform', {\n      operation,\n      passedTrackId: trackId,\n      codec,\n      ...this.logContext,\n    });\n\n    const transformFn = operation === 'encode' ? this.encodeFunction : this.decodeFunction;\n    const transformStream = new TransformStream({\n      transform: transformFn.bind(this),\n    });\n\n    readable\n      .pipeThrough(transformStream)\n      .pipeTo(writable)\n      .catch((e) => {\n        workerLogger.warn(e);\n        this.emit(\n          CryptorEvent.Error,\n          e instanceof CryptorError\n            ? e\n            : new CryptorError(e.message, undefined, this.participantIdentity),\n        );\n      });\n    this.trackId = trackId;\n  }\n\n  setSifTrailer(trailer: Uint8Array) {\n    workerLogger.debug('setting SIF trailer', { ...this.logContext, trailer });\n    this.sifTrailer = trailer;\n  }\n\n  /**\n   * Function that will be injected in a stream and will encrypt the given encoded frames.\n   *\n   * @param {RTCEncodedVideoFrame|RTCEncodedAudioFrame} encodedFrame - Encoded video frame.\n   * @param {TransformStreamDefaultController} controller - TransportStreamController.\n   *\n   * The VP8 payload descriptor described in\n   * https://tools.ietf.org/html/rfc7741#section-4.2\n   * is part of the RTP packet and not part of the frame and is not controllable by us.\n   * This is fine as the SFU keeps having access to it for routing.\n   *\n   * The encrypted frame is formed as follows:\n   * 1) Find unencrypted byte length, depending on the codec, frame type and kind.\n   * 2) Form the GCM IV for the frame as described above.\n   * 3) Encrypt the rest of the frame using AES-GCM.\n   * 4) Allocate space for the encrypted frame.\n   * 5) Copy the unencrypted bytes to the start of the encrypted frame.\n   * 6) Append the ciphertext to the encrypted frame.\n   * 7) Append the IV.\n   * 8) Append a single byte for the key identifier.\n   * 9) Enqueue the encrypted frame for sending.\n   */\n  protected async encodeFunction(\n    encodedFrame: RTCEncodedVideoFrame | RTCEncodedAudioFrame,\n    controller: TransformStreamDefaultController,\n  ) {\n    if (\n      !this.isEnabled() ||\n      // skip for encryption for empty dtx frames\n      encodedFrame.data.byteLength === 0\n    ) {\n      return controller.enqueue(encodedFrame);\n    }\n    const keySet = this.keys.getKeySet();\n    if (!keySet) {\n      throw new TypeError(\n        `key set not found for ${\n          this.participantIdentity\n        } at index ${this.keys.getCurrentKeyIndex()}`,\n      );\n    }\n    const { encryptionKey } = keySet;\n    const keyIndex = this.keys.getCurrentKeyIndex();\n\n    if (encryptionKey) {\n      const iv = this.makeIV(\n        encodedFrame.getMetadata().synchronizationSource ?? -1,\n        encodedFrame.timestamp,\n      );\n      let frameInfo = this.getUnencryptedBytes(encodedFrame);\n\n      // Thіs is not encrypted and contains the VP8 payload descriptor or the Opus TOC byte.\n      const frameHeader = new Uint8Array(encodedFrame.data, 0, frameInfo.unencryptedBytes);\n\n      // Frame trailer contains the R|IV_LENGTH and key index\n      const frameTrailer = new Uint8Array(2);\n\n      frameTrailer[0] = IV_LENGTH;\n      frameTrailer[1] = keyIndex;\n\n      // Construct frame trailer. Similar to the frame header described in\n      // https://tools.ietf.org/html/draft-omara-sframe-00#section-4.2\n      // but we put it at the end.\n      //\n      // ---------+-------------------------+-+---------+----\n      // payload  |IV...(length = IV_LENGTH)|R|IV_LENGTH|KID |\n      // ---------+-------------------------+-+---------+----\n      try {\n        const cipherText = await crypto.subtle.encrypt(\n          {\n            name: ENCRYPTION_ALGORITHM,\n            iv,\n            additionalData: new Uint8Array(encodedFrame.data, 0, frameHeader.byteLength),\n          },\n          encryptionKey,\n          new Uint8Array(encodedFrame.data, frameInfo.unencryptedBytes),\n        );\n\n        let newDataWithoutHeader = new Uint8Array(\n          cipherText.byteLength + iv.byteLength + frameTrailer.byteLength,\n        );\n        newDataWithoutHeader.set(new Uint8Array(cipherText)); // add ciphertext.\n        newDataWithoutHeader.set(new Uint8Array(iv), cipherText.byteLength); // append IV.\n        newDataWithoutHeader.set(frameTrailer, cipherText.byteLength + iv.byteLength); // append frame trailer.\n\n        if (frameInfo.isH264) {\n          newDataWithoutHeader = writeRbsp(newDataWithoutHeader);\n        }\n\n        var newData = new Uint8Array(frameHeader.byteLength + newDataWithoutHeader.byteLength);\n        newData.set(frameHeader);\n        newData.set(newDataWithoutHeader, frameHeader.byteLength);\n\n        encodedFrame.data = newData.buffer;\n\n        return controller.enqueue(encodedFrame);\n      } catch (e: any) {\n        // TODO: surface this to the app.\n        workerLogger.error(e);\n      }\n    } else {\n      workerLogger.debug('failed to encrypt, emitting error', this.logContext);\n      this.emit(\n        CryptorEvent.Error,\n        new CryptorError(\n          `encryption key missing for encoding`,\n          CryptorErrorReason.MissingKey,\n          this.participantIdentity,\n        ),\n      );\n    }\n  }\n\n  /**\n   * Function that will be injected in a stream and will decrypt the given encoded frames.\n   *\n   * @param {RTCEncodedVideoFrame|RTCEncodedAudioFrame} encodedFrame - Encoded video frame.\n   * @param {TransformStreamDefaultController} controller - TransportStreamController.\n   */\n  protected async decodeFunction(\n    encodedFrame: RTCEncodedVideoFrame | RTCEncodedAudioFrame,\n    controller: TransformStreamDefaultController,\n  ) {\n    if (\n      !this.isEnabled() ||\n      // skip for decryption for empty dtx frames\n      encodedFrame.data.byteLength === 0\n    ) {\n      workerLogger.debug('skipping empty frame', this.logContext);\n      this.sifGuard.recordUserFrame();\n      return controller.enqueue(encodedFrame);\n    }\n\n    if (isFrameServerInjected(encodedFrame.data, this.sifTrailer)) {\n      workerLogger.debug('enqueue SIF', this.logContext);\n      this.sifGuard.recordSif();\n\n      if (this.sifGuard.isSifAllowed()) {\n        encodedFrame.data = encodedFrame.data.slice(\n          0,\n          encodedFrame.data.byteLength - this.sifTrailer.byteLength,\n        );\n        return controller.enqueue(encodedFrame);\n      } else {\n        workerLogger.warn('SIF limit reached, dropping frame');\n        return;\n      }\n    } else {\n      this.sifGuard.recordUserFrame();\n    }\n    const data = new Uint8Array(encodedFrame.data);\n    const keyIndex = data[encodedFrame.data.byteLength - 1];\n\n    if (this.keys.getKeySet(keyIndex) && this.keys.hasValidKey) {\n      try {\n        const decodedFrame = await this.decryptFrame(encodedFrame, keyIndex);\n        this.keys.decryptionSuccess();\n        if (decodedFrame) {\n          return controller.enqueue(decodedFrame);\n        }\n      } catch (error) {\n        if (error instanceof CryptorError && error.reason === CryptorErrorReason.InvalidKey) {\n          if (this.keys.hasValidKey) {\n            this.emit(CryptorEvent.Error, error);\n            this.keys.decryptionFailure();\n          }\n        } else {\n          workerLogger.warn('decoding frame failed', { error });\n        }\n      }\n    } else if (!this.keys.getKeySet(keyIndex) && this.keys.hasValidKey) {\n      // emit an error in case the key index is out of bounds but the key handler thinks we still have a valid key\n      workerLogger.warn(`skipping decryption due to missing key at index ${keyIndex}`);\n      this.emit(\n        CryptorEvent.Error,\n        new CryptorError(\n          `missing key at index ${keyIndex} for participant ${this.participantIdentity}`,\n          CryptorErrorReason.MissingKey,\n          this.participantIdentity,\n        ),\n      );\n    }\n  }\n\n  /**\n   * Function that will decrypt the given encoded frame. If the decryption fails, it will\n   * ratchet the key for up to RATCHET_WINDOW_SIZE times.\n   */\n  private async decryptFrame(\n    encodedFrame: RTCEncodedVideoFrame | RTCEncodedAudioFrame,\n    keyIndex: number,\n    initialMaterial: KeySet | undefined = undefined,\n    ratchetOpts: DecodeRatchetOptions = { ratchetCount: 0 },\n  ): Promise<RTCEncodedVideoFrame | RTCEncodedAudioFrame | undefined> {\n    const keySet = this.keys.getKeySet(keyIndex);\n    if (!ratchetOpts.encryptionKey && !keySet) {\n      throw new TypeError(`no encryption key found for decryption of ${this.participantIdentity}`);\n    }\n    let frameInfo = this.getUnencryptedBytes(encodedFrame);\n\n    // Construct frame trailer. Similar to the frame header described in\n    // https://tools.ietf.org/html/draft-omara-sframe-00#section-4.2\n    // but we put it at the end.\n    //\n    // ---------+-------------------------+-+---------+----\n    // payload  |IV...(length = IV_LENGTH)|R|IV_LENGTH|KID |\n    // ---------+-------------------------+-+---------+----\n\n    try {\n      const frameHeader = new Uint8Array(encodedFrame.data, 0, frameInfo.unencryptedBytes);\n      var encryptedData = new Uint8Array(\n        encodedFrame.data,\n        frameHeader.length,\n        encodedFrame.data.byteLength - frameHeader.length,\n      );\n      if (frameInfo.isH264 && needsRbspUnescaping(encryptedData)) {\n        encryptedData = parseRbsp(encryptedData);\n        const newUint8 = new Uint8Array(frameHeader.byteLength + encryptedData.byteLength);\n        newUint8.set(frameHeader);\n        newUint8.set(encryptedData, frameHeader.byteLength);\n        encodedFrame.data = newUint8.buffer;\n      }\n\n      const frameTrailer = new Uint8Array(encodedFrame.data, encodedFrame.data.byteLength - 2, 2);\n\n      const ivLength = frameTrailer[0];\n      const iv = new Uint8Array(\n        encodedFrame.data,\n        encodedFrame.data.byteLength - ivLength - frameTrailer.byteLength,\n        ivLength,\n      );\n\n      const cipherTextStart = frameHeader.byteLength;\n      const cipherTextLength =\n        encodedFrame.data.byteLength -\n        (frameHeader.byteLength + ivLength + frameTrailer.byteLength);\n\n      const plainText = await crypto.subtle.decrypt(\n        {\n          name: ENCRYPTION_ALGORITHM,\n          iv,\n          additionalData: new Uint8Array(encodedFrame.data, 0, frameHeader.byteLength),\n        },\n        ratchetOpts.encryptionKey ?? keySet!.encryptionKey,\n        new Uint8Array(encodedFrame.data, cipherTextStart, cipherTextLength),\n      );\n\n      const newData = new ArrayBuffer(frameHeader.byteLength + plainText.byteLength);\n      const newUint8 = new Uint8Array(newData);\n\n      newUint8.set(new Uint8Array(encodedFrame.data, 0, frameHeader.byteLength));\n      newUint8.set(new Uint8Array(plainText), frameHeader.byteLength);\n\n      encodedFrame.data = newData;\n\n      return encodedFrame;\n    } catch (error: any) {\n      if (this.keyProviderOptions.ratchetWindowSize > 0) {\n        if (ratchetOpts.ratchetCount < this.keyProviderOptions.ratchetWindowSize) {\n          workerLogger.debug(\n            `ratcheting key attempt ${ratchetOpts.ratchetCount} of ${\n              this.keyProviderOptions.ratchetWindowSize\n            }, for kind ${encodedFrame instanceof RTCEncodedAudioFrame ? 'audio' : 'video'}`,\n          );\n\n          let ratchetedKeySet: KeySet | undefined;\n          if ((initialMaterial ?? keySet) === this.keys.getKeySet(keyIndex)) {\n            // only ratchet if the currently set key is still the same as the one used to decrypt this frame\n            // if not, it might be that a different frame has already ratcheted and we try with that one first\n            const newMaterial = await this.keys.ratchetKey(keyIndex, false);\n\n            ratchetedKeySet = await deriveKeys(newMaterial, this.keyProviderOptions.ratchetSalt);\n          }\n\n          const frame = await this.decryptFrame(encodedFrame, keyIndex, initialMaterial || keySet, {\n            ratchetCount: ratchetOpts.ratchetCount + 1,\n            encryptionKey: ratchetedKeySet?.encryptionKey,\n          });\n          if (frame && ratchetedKeySet) {\n            // before updating the keys, make sure that the keySet used for this frame is still the same as the currently set key\n            // if it's not, a new key might have been set already, which we don't want to override\n            if ((initialMaterial ?? keySet) === this.keys.getKeySet(keyIndex)) {\n              this.keys.setKeySet(ratchetedKeySet, keyIndex, true);\n              // decryption was successful, set the new key index to reflect the ratcheted key set\n              this.keys.setCurrentKeyIndex(keyIndex);\n            }\n          }\n          return frame;\n        } else {\n          /**\n           * Because we only set a new key once decryption has been successful,\n           * we can be sure that we don't need to reset the key to the initial material at this point\n           * as the key has not been updated on the keyHandler instance\n           */\n\n          workerLogger.warn('maximum ratchet attempts exceeded');\n          throw new CryptorError(\n            `valid key missing for participant ${this.participantIdentity}`,\n            CryptorErrorReason.InvalidKey,\n            this.participantIdentity,\n          );\n        }\n      } else {\n        throw new CryptorError(\n          `Decryption failed: ${error.message}`,\n          CryptorErrorReason.InvalidKey,\n          this.participantIdentity,\n        );\n      }\n    }\n  }\n\n  /**\n   * Construct the IV used for AES-GCM and sent (in plain) with the packet similar to\n   * https://tools.ietf.org/html/rfc7714#section-8.1\n   * It concatenates\n   * - the 32 bit synchronization source (SSRC) given on the encoded frame,\n   * - the 32 bit rtp timestamp given on the encoded frame,\n   * - a send counter that is specific to the SSRC. Starts at a random number.\n   * The send counter is essentially the pictureId but we currently have to implement this ourselves.\n   * There is no XOR with a salt. Note that this IV leaks the SSRC to the receiver but since this is\n   * randomly generated and SFUs may not rewrite this is considered acceptable.\n   * The SSRC is used to allow demultiplexing multiple streams with the same key, as described in\n   *   https://tools.ietf.org/html/rfc3711#section-4.1.1\n   * The RTP timestamp is 32 bits and advances by the codec clock rate (90khz for video, 48khz for\n   * opus audio) every second. For video it rolls over roughly every 13 hours.\n   * The send counter will advance at the frame rate (30fps for video, 50fps for 20ms opus audio)\n   * every second. It will take a long time to roll over.\n   *\n   * See also https://developer.mozilla.org/en-US/docs/Web/API/AesGcmParams\n   */\n  private makeIV(synchronizationSource: number, timestamp: number) {\n    const iv = new ArrayBuffer(IV_LENGTH);\n    const ivView = new DataView(iv);\n\n    // having to keep our own send count (similar to a picture id) is not ideal.\n    if (!this.sendCounts.has(synchronizationSource)) {\n      // Initialize with a random offset, similar to the RTP sequence number.\n      this.sendCounts.set(synchronizationSource, Math.floor(Math.random() * 0xffff));\n    }\n\n    const sendCount = this.sendCounts.get(synchronizationSource) ?? 0;\n\n    ivView.setUint32(0, synchronizationSource);\n    ivView.setUint32(4, timestamp);\n    ivView.setUint32(8, timestamp - (sendCount % 0xffff));\n\n    this.sendCounts.set(synchronizationSource, sendCount + 1);\n\n    return iv;\n  }\n\n  private getUnencryptedBytes(frame: RTCEncodedVideoFrame | RTCEncodedAudioFrame): {\n    unencryptedBytes: number;\n    isH264: boolean;\n  } {\n    var frameInfo = { unencryptedBytes: 0, isH264: false };\n    if (isVideoFrame(frame)) {\n      let detectedCodec = this.getVideoCodec(frame) ?? this.videoCodec;\n      if (detectedCodec !== this.detectedCodec) {\n        workerLogger.debug('detected different codec', {\n          detectedCodec,\n          oldCodec: this.detectedCodec,\n          ...this.logContext,\n        });\n        this.detectedCodec = detectedCodec;\n      }\n\n      if (detectedCodec === 'av1') {\n        throw new Error(`${detectedCodec} is not yet supported for end to end encryption`);\n      }\n\n      if (detectedCodec === 'vp8') {\n        frameInfo.unencryptedBytes = UNENCRYPTED_BYTES[frame.type];\n      } else if (detectedCodec === 'vp9') {\n        frameInfo.unencryptedBytes = 0;\n        return frameInfo;\n      }\n\n      const data = new Uint8Array(frame.data);\n      try {\n        const naluIndices = findNALUIndices(data);\n\n        // if the detected codec is undefined we test whether it _looks_ like a h264 frame as a best guess\n        frameInfo.isH264 =\n          detectedCodec === 'h264' ||\n          naluIndices.some((naluIndex) =>\n            [NALUType.SLICE_IDR, NALUType.SLICE_NON_IDR].includes(parseNALUType(data[naluIndex])),\n          );\n\n        if (frameInfo.isH264) {\n          for (const index of naluIndices) {\n            let type = parseNALUType(data[index]);\n            switch (type) {\n              case NALUType.SLICE_IDR:\n              case NALUType.SLICE_NON_IDR:\n                frameInfo.unencryptedBytes = index + 2;\n                return frameInfo;\n              default:\n                break;\n            }\n          }\n          throw new TypeError('Could not find NALU');\n        }\n      } catch (e) {\n        // no op, we just continue and fallback to vp8\n      }\n\n      frameInfo.unencryptedBytes = UNENCRYPTED_BYTES[frame.type];\n      return frameInfo;\n    } else {\n      frameInfo.unencryptedBytes = UNENCRYPTED_BYTES.audio;\n      return frameInfo;\n    }\n  }\n\n  /**\n   * inspects frame payloadtype if available and maps it to the codec specified in rtpMap\n   */\n  private getVideoCodec(frame: RTCEncodedVideoFrame): VideoCodec | undefined {\n    if (this.rtpMap.size === 0) {\n      return undefined;\n    }\n    const payloadType = frame.getMetadata().payloadType;\n    const codec = payloadType ? this.rtpMap.get(payloadType) : undefined;\n    return codec;\n  }\n}\n\n/**\n * Slice the NALUs present in the supplied buffer, assuming it is already byte-aligned\n * code adapted from https://github.com/medooze/h264-frame-parser/blob/main/lib/NalUnits.ts to return indices only\n */\nexport function findNALUIndices(stream: Uint8Array): number[] {\n  const result: number[] = [];\n  let start = 0,\n    pos = 0,\n    searchLength = stream.length - 2;\n  while (pos < searchLength) {\n    // skip until end of current NALU\n    while (\n      pos < searchLength &&\n      !(stream[pos] === 0 && stream[pos + 1] === 0 && stream[pos + 2] === 1)\n    )\n      pos++;\n    if (pos >= searchLength) pos = stream.length;\n    // remove trailing zeros from current NALU\n    let end = pos;\n    while (end > start && stream[end - 1] === 0) end--;\n    // save current NALU\n    if (start === 0) {\n      if (end !== start) throw TypeError('byte stream contains leading data');\n    } else {\n      result.push(start);\n    }\n    // begin new NALU\n    start = pos = pos + 3;\n  }\n  return result;\n}\n\nexport function parseNALUType(startByte: number): NALUType {\n  return startByte & kNaluTypeMask;\n}\n\nconst kNaluTypeMask = 0x1f;\n\nexport enum NALUType {\n  /** Coded slice of a non-IDR picture */\n  SLICE_NON_IDR = 1,\n  /** Coded slice data partition A */\n  SLICE_PARTITION_A = 2,\n  /** Coded slice data partition B */\n  SLICE_PARTITION_B = 3,\n  /** Coded slice data partition C */\n  SLICE_PARTITION_C = 4,\n  /** Coded slice of an IDR picture */\n  SLICE_IDR = 5,\n  /** Supplemental enhancement information */\n  SEI = 6,\n  /** Sequence parameter set */\n  SPS = 7,\n  /** Picture parameter set */\n  PPS = 8,\n  /** Access unit delimiter */\n  AUD = 9,\n  /** End of sequence */\n  END_SEQ = 10,\n  /** End of stream */\n  END_STREAM = 11,\n  /** Filler data */\n  FILLER_DATA = 12,\n  /** Sequence parameter set extension */\n  SPS_EXT = 13,\n  /** Prefix NAL unit */\n  PREFIX_NALU = 14,\n  /** Subset sequence parameter set */\n  SUBSET_SPS = 15,\n  /** Depth parameter set */\n  DPS = 16,\n\n  // 17, 18 reserved\n\n  /** Coded slice of an auxiliary coded picture without partitioning */\n  SLICE_AUX = 19,\n  /** Coded slice extension */\n  SLICE_EXT = 20,\n  /** Coded slice extension for a depth view component or a 3D-AVC texture view component */\n  SLICE_LAYER_EXT = 21,\n\n  // 22, 23 reserved\n}\n\n/**\n * we use a magic frame trailer to detect whether a frame is injected\n * by the livekit server and thus to be treated as unencrypted\n * @internal\n */\nexport function isFrameServerInjected(frameData: ArrayBuffer, trailerBytes: Uint8Array): boolean {\n  if (trailerBytes.byteLength === 0) {\n    return false;\n  }\n  const frameTrailer = new Uint8Array(\n    frameData.slice(frameData.byteLength - trailerBytes.byteLength),\n  );\n  return trailerBytes.every((value, index) => value === frameTrailer[index]);\n}\n","import { EventEmitter } from 'events';\nimport type TypedEventEmitter from 'typed-emitter';\nimport { workerLogger } from '../../logger';\nimport { KeyHandlerEvent, type ParticipantKeyHandlerCallbacks } from '../events';\nimport type { KeyProviderOptions, KeySet } from '../types';\nimport { deriveKeys, importKey, ratchet } from '../utils';\n\n// TODO ParticipantKeyHandlers currently don't get destroyed on participant disconnect\n// we could do this by having a separate worker message on participant disconnected.\n\n/**\n * ParticipantKeyHandler is responsible for providing a cryptor instance with the\n * en-/decryption key of a participant. It assumes that all tracks of a specific participant\n * are encrypted with the same key.\n * Additionally it exposes a method to ratchet a key which can be used by the cryptor either automatically\n * if decryption fails or can be triggered manually on both sender and receiver side.\n *\n */\nexport class ParticipantKeyHandler extends (EventEmitter as new () => TypedEventEmitter<ParticipantKeyHandlerCallbacks>) {\n  private currentKeyIndex: number;\n\n  private cryptoKeyRing: Array<KeySet | undefined>;\n\n  private keyProviderOptions: KeyProviderOptions;\n\n  private ratchetPromiseMap: Map<number, Promise<CryptoKey>>;\n\n  private participantIdentity: string;\n\n  private decryptionFailureCount = 0;\n\n  private _hasValidKey: boolean = true;\n\n  get hasValidKey() {\n    return this._hasValidKey;\n  }\n\n  constructor(participantIdentity: string, keyProviderOptions: KeyProviderOptions) {\n    super();\n    this.currentKeyIndex = 0;\n    if (keyProviderOptions.keyringSize < 1 || keyProviderOptions.keyringSize > 255) {\n      throw new TypeError('Keyring size needs to be between 1 and 256');\n    }\n    this.cryptoKeyRing = new Array(keyProviderOptions.keyringSize).fill(undefined);\n    this.keyProviderOptions = keyProviderOptions;\n    this.ratchetPromiseMap = new Map();\n    this.participantIdentity = participantIdentity;\n    this.resetKeyStatus();\n  }\n\n  decryptionFailure() {\n    if (this.keyProviderOptions.failureTolerance < 0) {\n      return;\n    }\n    this.decryptionFailureCount += 1;\n\n    if (this.decryptionFailureCount > this.keyProviderOptions.failureTolerance) {\n      workerLogger.warn(`key for ${this.participantIdentity} is being marked as invalid`);\n      this._hasValidKey = false;\n    }\n  }\n\n  decryptionSuccess() {\n    this.resetKeyStatus();\n  }\n\n  /**\n   * Call this after user initiated ratchet or a new key has been set in order to make sure to mark potentially\n   * invalid keys as valid again\n   */\n  resetKeyStatus() {\n    this.decryptionFailureCount = 0;\n    this._hasValidKey = true;\n  }\n\n  /**\n   * Ratchets the current key (or the one at keyIndex if provided) and\n   * returns the ratcheted material\n   * if `setKey` is true (default), it will also set the ratcheted key directly on the crypto key ring\n   * @param keyIndex\n   * @param setKey\n   */\n  ratchetKey(keyIndex?: number, setKey = true): Promise<CryptoKey> {\n    const currentKeyIndex = keyIndex ?? this.getCurrentKeyIndex();\n\n    const existingPromise = this.ratchetPromiseMap.get(currentKeyIndex);\n    if (typeof existingPromise !== 'undefined') {\n      return existingPromise;\n    }\n    const ratchetPromise = new Promise<CryptoKey>(async (resolve, reject) => {\n      try {\n        const keySet = this.getKeySet(currentKeyIndex);\n        if (!keySet) {\n          throw new TypeError(\n            `Cannot ratchet key without a valid keyset of participant ${this.participantIdentity}`,\n          );\n        }\n        const currentMaterial = keySet.material;\n        const newMaterial = await importKey(\n          await ratchet(currentMaterial, this.keyProviderOptions.ratchetSalt),\n          currentMaterial.algorithm.name,\n          'derive',\n        );\n\n        if (setKey) {\n          this.setKeyFromMaterial(newMaterial, currentKeyIndex, true);\n          this.emit(\n            KeyHandlerEvent.KeyRatcheted,\n            newMaterial,\n            this.participantIdentity,\n            currentKeyIndex,\n          );\n        }\n        resolve(newMaterial);\n      } catch (e) {\n        reject(e);\n      } finally {\n        this.ratchetPromiseMap.delete(currentKeyIndex);\n      }\n    });\n    this.ratchetPromiseMap.set(currentKeyIndex, ratchetPromise);\n    return ratchetPromise;\n  }\n\n  /**\n   * takes in a key material with `deriveBits` and `deriveKey` set as key usages\n   * and derives encryption keys from the material and sets it on the key ring buffer\n   * together with the material\n   * also resets the valid key property and updates the currentKeyIndex\n   */\n  async setKey(material: CryptoKey, keyIndex = 0) {\n    await this.setKeyFromMaterial(material, keyIndex);\n    this.resetKeyStatus();\n  }\n\n  /**\n   * takes in a key material with `deriveBits` and `deriveKey` set as key usages\n   * and derives encryption keys from the material and sets it on the key ring buffers\n   * together with the material\n   * also updates the currentKeyIndex\n   */\n  async setKeyFromMaterial(material: CryptoKey, keyIndex: number, emitRatchetEvent = false) {\n    const keySet = await deriveKeys(material, this.keyProviderOptions.ratchetSalt);\n    const newIndex = keyIndex >= 0 ? keyIndex % this.cryptoKeyRing.length : this.currentKeyIndex;\n    workerLogger.debug(`setting new key with index ${keyIndex}`, {\n      usage: material.usages,\n      algorithm: material.algorithm,\n      ratchetSalt: this.keyProviderOptions.ratchetSalt,\n    });\n    this.setKeySet(keySet, newIndex, emitRatchetEvent);\n    if (newIndex >= 0) this.currentKeyIndex = newIndex;\n  }\n\n  setKeySet(keySet: KeySet, keyIndex: number, emitRatchetEvent = false) {\n    this.cryptoKeyRing[keyIndex % this.cryptoKeyRing.length] = keySet;\n\n    if (emitRatchetEvent) {\n      this.emit(KeyHandlerEvent.KeyRatcheted, keySet.material, this.participantIdentity, keyIndex);\n    }\n  }\n\n  async setCurrentKeyIndex(index: number) {\n    this.currentKeyIndex = index % this.cryptoKeyRing.length;\n    this.resetKeyStatus();\n  }\n\n  getCurrentKeyIndex() {\n    return this.currentKeyIndex;\n  }\n\n  /**\n   * returns currently used KeySet or the one at `keyIndex` if provided\n   * @param keyIndex\n   * @returns\n   */\n  getKeySet(keyIndex?: number) {\n    return this.cryptoKeyRing[keyIndex ?? this.currentKeyIndex];\n  }\n}\n","import { workerLogger } from '../../logger';\nimport { VideoCodec } from '../../room/track/options';\nimport { KEY_PROVIDER_DEFAULTS } from '../constants';\nimport { CryptorErrorReason } from '../errors';\nimport { CryptorEvent, KeyHandlerEvent } from '../events';\nimport type {\n  E2EEWorkerMessage,\n  ErrorMessage,\n  InitAck,\n  KeyProviderOptions,\n  RatchetMessage,\n  RatchetRequestMessage,\n} from '../types';\nimport { FrameCryptor, encryptionEnabledMap } from './FrameCryptor';\nimport { ParticipantKeyHandler } from './ParticipantKeyHandler';\n\nconst participantCryptors: FrameCryptor[] = [];\nconst participantKeys: Map<string, ParticipantKeyHandler> = new Map();\nlet sharedKeyHandler: ParticipantKeyHandler | undefined;\n\nlet isEncryptionEnabled: boolean = false;\n\nlet useSharedKey: boolean = false;\n\nlet sifTrailer: Uint8Array | undefined;\n\nlet keyProviderOptions: KeyProviderOptions = KEY_PROVIDER_DEFAULTS;\n\nlet rtpMap: Map<number, VideoCodec> = new Map();\n\nworkerLogger.setDefaultLevel('info');\n\nonmessage = (ev) => {\n  const { kind, data }: E2EEWorkerMessage = ev.data;\n\n  switch (kind) {\n    case 'init':\n      workerLogger.setLevel(data.loglevel);\n      workerLogger.info('worker initialized');\n      keyProviderOptions = data.keyProviderOptions;\n      useSharedKey = !!data.keyProviderOptions.sharedKey;\n      // acknowledge init successful\n      const ackMsg: InitAck = {\n        kind: 'initAck',\n        data: { enabled: isEncryptionEnabled },\n      };\n      postMessage(ackMsg);\n      break;\n    case 'enable':\n      setEncryptionEnabled(data.enabled, data.participantIdentity);\n      workerLogger.info(\n        `updated e2ee enabled status for ${data.participantIdentity} to ${data.enabled}`,\n      );\n      // acknowledge enable call successful\n      postMessage(ev.data);\n      break;\n    case 'decode':\n      let cryptor = getTrackCryptor(data.participantIdentity, data.trackId);\n      cryptor.setupTransform(\n        kind,\n        data.readableStream,\n        data.writableStream,\n        data.trackId,\n        data.codec,\n      );\n      break;\n    case 'encode':\n      let pubCryptor = getTrackCryptor(data.participantIdentity, data.trackId);\n      pubCryptor.setupTransform(\n        kind,\n        data.readableStream,\n        data.writableStream,\n        data.trackId,\n        data.codec,\n      );\n      break;\n    case 'setKey':\n      if (useSharedKey) {\n        setSharedKey(data.key, data.keyIndex);\n      } else if (data.participantIdentity) {\n        workerLogger.info(\n          `set participant sender key ${data.participantIdentity} index ${data.keyIndex}`,\n        );\n        getParticipantKeyHandler(data.participantIdentity).setKey(data.key, data.keyIndex);\n      } else {\n        workerLogger.error('no participant Id was provided and shared key usage is disabled');\n      }\n      break;\n    case 'removeTransform':\n      unsetCryptorParticipant(data.trackId, data.participantIdentity);\n      break;\n    case 'updateCodec':\n      getTrackCryptor(data.participantIdentity, data.trackId).setVideoCodec(data.codec);\n      break;\n    case 'setRTPMap':\n      // this is only used for the local participant\n      rtpMap = data.map;\n      participantCryptors.forEach((cr) => {\n        if (cr.getParticipantIdentity() === data.participantIdentity) {\n          cr.setRtpMap(data.map);\n        }\n      });\n      break;\n    case 'ratchetRequest':\n      handleRatchetRequest(data);\n      break;\n    case 'setSifTrailer':\n      handleSifTrailer(data.trailer);\n      break;\n    default:\n      break;\n  }\n};\n\nasync function handleRatchetRequest(data: RatchetRequestMessage['data']) {\n  if (useSharedKey) {\n    const keyHandler = getSharedKeyHandler();\n    await keyHandler.ratchetKey(data.keyIndex);\n    keyHandler.resetKeyStatus();\n  } else if (data.participantIdentity) {\n    const keyHandler = getParticipantKeyHandler(data.participantIdentity);\n    await keyHandler.ratchetKey(data.keyIndex);\n    keyHandler.resetKeyStatus();\n  } else {\n    workerLogger.error(\n      'no participant Id was provided for ratchet request and shared key usage is disabled',\n    );\n  }\n}\n\nfunction getTrackCryptor(participantIdentity: string, trackId: string) {\n  let cryptors = participantCryptors.filter((c) => c.getTrackId() === trackId);\n  if (cryptors.length > 1) {\n    const debugInfo = cryptors\n      .map((c) => {\n        return { participant: c.getParticipantIdentity() };\n      })\n      .join(',');\n    workerLogger.error(\n      `Found multiple cryptors for the same trackID ${trackId}. target participant: ${participantIdentity} `,\n      { participants: debugInfo },\n    );\n  }\n  let cryptor = cryptors[0];\n  if (!cryptor) {\n    workerLogger.info('creating new cryptor for', { participantIdentity });\n    if (!keyProviderOptions) {\n      throw Error('Missing keyProvider options');\n    }\n    cryptor = new FrameCryptor({\n      participantIdentity,\n      keys: getParticipantKeyHandler(participantIdentity),\n      keyProviderOptions,\n      sifTrailer,\n    });\n    cryptor.setRtpMap(rtpMap);\n    setupCryptorErrorEvents(cryptor);\n    participantCryptors.push(cryptor);\n  } else if (participantIdentity !== cryptor.getParticipantIdentity()) {\n    // assign new participant id to track cryptor and pass in correct key handler\n    cryptor.setParticipant(participantIdentity, getParticipantKeyHandler(participantIdentity));\n  }\n\n  return cryptor;\n}\n\nfunction getParticipantKeyHandler(participantIdentity: string) {\n  if (useSharedKey) {\n    return getSharedKeyHandler();\n  }\n  let keys = participantKeys.get(participantIdentity);\n  if (!keys) {\n    keys = new ParticipantKeyHandler(participantIdentity, keyProviderOptions);\n    keys.on(KeyHandlerEvent.KeyRatcheted, emitRatchetedKeys);\n    participantKeys.set(participantIdentity, keys);\n  }\n  return keys;\n}\n\nfunction getSharedKeyHandler() {\n  if (!sharedKeyHandler) {\n    workerLogger.debug('creating new shared key handler');\n    sharedKeyHandler = new ParticipantKeyHandler('shared-key', keyProviderOptions);\n  }\n  return sharedKeyHandler;\n}\n\nfunction unsetCryptorParticipant(trackId: string, participantIdentity: string) {\n  const cryptors = participantCryptors.filter(\n    (c) => c.getParticipantIdentity() === participantIdentity && c.getTrackId() === trackId,\n  );\n  if (cryptors.length > 1) {\n    workerLogger.error('Found multiple cryptors for the same participant and trackID combination', {\n      trackId,\n      participantIdentity,\n    });\n  }\n  const cryptor = cryptors[0];\n  if (!cryptor) {\n    workerLogger.warn('Could not unset participant on cryptor', { trackId, participantIdentity });\n  } else {\n    cryptor.unsetParticipant();\n  }\n}\n\nfunction setEncryptionEnabled(enable: boolean, participantIdentity: string) {\n  workerLogger.debug(`setting encryption enabled for all tracks of ${participantIdentity}`, {\n    enable,\n  });\n  encryptionEnabledMap.set(participantIdentity, enable);\n}\n\nfunction setSharedKey(key: CryptoKey, index?: number) {\n  workerLogger.info('set shared key', { index });\n  getSharedKeyHandler().setKey(key, index);\n}\n\nfunction setupCryptorErrorEvents(cryptor: FrameCryptor) {\n  cryptor.on(CryptorEvent.Error, (error) => {\n    const msg: ErrorMessage = {\n      kind: 'error',\n      data: { error: new Error(`${CryptorErrorReason[error.reason]}: ${error.message}`) },\n    };\n    postMessage(msg);\n  });\n}\n\nfunction emitRatchetedKeys(material: CryptoKey, participantIdentity: string, keyIndex?: number) {\n  const msg: RatchetMessage = {\n    kind: `ratchetKey`,\n    data: {\n      participantIdentity,\n      keyIndex,\n      material,\n    },\n  };\n  postMessage(msg);\n}\n\nfunction handleSifTrailer(trailer: Uint8Array) {\n  sifTrailer = trailer;\n  participantCryptors.forEach((c) => {\n    c.setSifTrailer(trailer);\n  });\n}\n\n// Operations using RTCRtpScriptTransform.\n// @ts-ignore\nif (self.RTCTransformEvent) {\n  workerLogger.debug('setup transform event');\n  // @ts-ignore\n  self.onrtctransform = (event: RTCTransformEvent) => {\n    // @ts-ignore .transformer property is part of RTCTransformEvent\n    const transformer = event.transformer;\n    workerLogger.debug('transformer', transformer);\n    // @ts-ignore monkey patching non standard flag\n    transformer.handled = true;\n    const { kind, participantIdentity, trackId, codec } = transformer.options;\n    const cryptor = getTrackCryptor(participantIdentity, trackId);\n    workerLogger.debug('transform', { codec });\n    cryptor.setupTransform(kind, transformer.readable, transformer.writable, trackId, codec);\n  };\n}\n"],"names":["root","definition","this","noop","undefinedType","isIE","window","navigator","test","userAgent","logMethods","_loggersByName","defaultLogger","bindMethod","obj","methodName","method","bind","Function","prototype","call","e","apply","arguments","traceForIE","console","log","trace","replaceLoggingMethods","level","getLevel","i","length","methodFactory","name","debug","levels","SILENT","enableLoggingWhenConsoleArrives","defaultMethodFactory","_level","_loggerName","undefined","realMethod","Logger","factory","inheritedLevel","defaultLevel","userLevel","self","storageKey","getPersistedLevel","storedLevel","localStorage","ignore","cookie","document","cookieName","encodeURIComponent","location","indexOf","exec","slice","normalizeLevel","input","toUpperCase","TypeError","TRACE","DEBUG","INFO","WARN","ERROR","setLevel","persist","levelNum","levelName","persistLevelIfPossible","setDefaultLevel","resetLevel","removeItem","clearPersistedLevel","enableAll","disableAll","rebuild","childName","initialLevel","getLogger","logger","_log","noConflict","getLoggers","exports","module","LogLevel","LoggerNames","livekitLogger","Object","values","map","info","workerLogger","ENCRYPTION_ALGORITHM","UNENCRYPTED_BYTES","key","delta","audio","empty","KEY_PROVIDER_DEFAULTS","sharedKey","ratchetSalt","ratchetWindowSize","failureTolerance","keyringSize","LivekitError","Error","constructor","code","message","super","MediaDeviceFailure","CryptorErrorReason","KeyProviderEvent","KeyHandlerEvent","EncryptionEvent","CryptorEvent","getFailure","error","NotFound","PermissionDenied","DeviceInUse","Other","CryptorError","reason","InternalError","participantIdentity","ReflectOwnKeys","R","Reflect","ReflectApply","target","receiver","args","ownKeys","getOwnPropertySymbols","getOwnPropertyNames","concat","NumberIsNaN","Number","isNaN","value","EventEmitter","init","eventsModule","once","emitter","Promise","resolve","reject","errorListener","err","removeListener","resolver","eventTargetAgnosticAddListener","handler","flags","on","addErrorHandlerIfEventEmitter","_events","_eventsCount","_maxListeners","defaultMaxListeners","checkListener","listener","_getMaxListeners","that","_addListener","type","prepend","m","events","existing","warning","create","newListener","emit","unshift","push","warned","w","String","count","warn","onceWrapper","fired","wrapFn","_onceWrap","state","wrapped","_listeners","unwrap","evlistener","arr","ret","Array","unwrapListeners","arrayClone","listenerCount","n","copy","addEventListener","wrapListener","arg","removeEventListener","defineProperty","enumerable","get","set","RangeError","getPrototypeOf","setMaxListeners","getMaxListeners","doError","er","context","len","listeners","addListener","prependListener","prependOnceListener","list","position","originalListener","shift","index","pop","spliceOne","off","removeAllListeners","keys","rawListeners","eventNames","getAlgoOptions","algorithmName","salt","encodedSalt","TextEncoder","encode","hash","ArrayBuffer","iterations","deriveKeys","material","algorithmOptions","algorithm","encryptionKey","crypto","subtle","deriveKey","SifGuard","consecutiveSifCount","lastSifReceivedAt","userFramesSinceSif","recordSif","_a","sifSequenceStartedAt","Date","now","recordUserFrame","reset","isSifAllowed","encryptionEnabledMap","Map","BaseFrameCryptor","encodeFunction","encodedFrame","controller","decodeFunction","FrameCryptor","opts","sendCounts","rtpMap","keyProviderOptions","sifTrailer","Uint8Array","from","sifGuard","logContext","participant","mediaTrackId","trackId","fallbackCodec","videoCodec","setParticipant","id","assign","unsetParticipant","isEnabled","getParticipantIdentity","getTrackId","setVideoCodec","codec","setRtpMap","setupTransform","operation","readable","writable","passedTrackId","transformFn","transformStream","TransformStream","transform","pipeThrough","pipeTo","catch","setSifTrailer","trailer","data","byteLength","enqueue","keySet","getKeySet","getCurrentKeyIndex","keyIndex","iv","makeIV","getMetadata","synchronizationSource","timestamp","frameInfo","getUnencryptedBytes","frameHeader","unencryptedBytes","frameTrailer","cipherText","encrypt","additionalData","newDataWithoutHeader","isH264","data_in","dataOut","numConsecutiveZeros","byte","writeRbsp","newData","buffer","MissingKey","frameData","trailerBytes","every","isFrameServerInjected","hasValidKey","decodedFrame","decryptFrame","decryptionSuccess","InvalidKey","decryptionFailure","encodedFrame_1","keyIndex_1","_this","initialMaterial","ratchetOpts","ratchetCount","encryptedData","needsRbspUnescaping","stream","parseRbsp","newUint8","ivLength","cipherTextStart","cipherTextLength","plainText","decrypt","ratchetedKeySet","RTCEncodedAudioFrame","newMaterial","ratchetKey","frame","setKeySet","setCurrentKeyIndex","ivView","DataView","has","Math","floor","random","sendCount","setUint32","isVideoFrame","detectedCodec","getVideoCodec","oldCodec","naluIndices","result","start","pos","searchLength","end","findNALUIndices","some","naluIndex","NALUType","SLICE_IDR","SLICE_NON_IDR","includes","parseNALUType","size","payloadType","startByte","kNaluTypeMask","ParticipantKeyHandler","_hasValidKey","decryptionFailureCount","currentKeyIndex","cryptoKeyRing","fill","ratchetPromiseMap","resetKeyStatus","setKey","existingPromise","ratchetPromise","__awaiter","currentMaterial","keyBytes_1","keyBytes","usage","importKey","deriveBits","ratchet","setKeyFromMaterial","KeyRatcheted","delete","material_1","_this2","emitRatchetEvent","newIndex","usages","participantCryptors","participantKeys","sharedKeyHandler","useSharedKey","getTrackCryptor","cryptors","filter","c","debugInfo","join","participants","cryptor","getParticipantKeyHandler","msg","kind","postMessage","setupCryptorErrorEvents","getSharedKeyHandler","emitRatchetedKeys","onmessage","ev","loglevel","enabled","enable","readableStream","writableStream","unsetCryptorParticipant","forEach","cr","keyHandler","handleRatchetRequest","RTCTransformEvent","onrtctransform","event","transformer","handled","options"],"mappings":"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","x_google_ignoreList":[0,6]}